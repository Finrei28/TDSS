// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  username               String?
  email                  String         @unique
  password               String?
  resetPasswordToken      String? 
  resetPasswordTokenExpiresAt DateTime?
  role                   Roles          @default(USER)
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  Authenticator          Authenticator[]
  requires2FAExpiresAt   DateTime?
  otp                    String? // One time password
  otpExpiresAt           DateTime? // One time password expiration date
  verificationToken      String?
  verificationTokenExpiresAt  DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  strategies             Strategy[]     @relation("UserStrategies")
  strategyLikes          UserStrategyLike[]
  comments               Comment[]
  donations              Donation[]
}

model Donation {
  id           String      @id @default(cuid())
  userId       String
  amount       Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  paymentMethod String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

enum Roles {
  ADMIN
  USER
}

model Map {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  gamemodes  Gamemode[]
  difficulty Difficulty
  image      String     @unique
  Strategy   Strategy[]
}

model Strategy {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  map            Map            @relation(fields: [mapId], references: [id])
  mapId          Int
  description    String
  numOfPlayer    NumOfPlayer    @default(FOUR)
  players        Player[]       // Relation to Player model
  gamemode       Gamemode
  inGameGamemode InGameGamemode?
  difficulty     StratDifficulty
  createdAt      DateTime       @default(now())
  createdBy      User           @relation("UserStrategies", fields: [userId], references: [id])
  userId         String
  comments       Comment[]
  strategyLikes  UserStrategyLike[]
}

model UserStrategyLike {
  id          Int      @id @default(autoincrement())
  userId      String
  strategyId  Int
  likedAt     DateTime @default(now()) // Field to capture when the strategy was liked

  user        User      @relation(fields: [userId], references: [id])
  strategy    Strategy  @relation(fields: [strategyId], references: [id])

  @@unique([userId, strategyId]) // Ensure that a user can only like a strategy once
}

model Comment {
  id             Int            @id @default(autoincrement())
  content        String
  createdAt      DateTime       @default(now())
  author         User           @relation(fields: [userId], references: [id])
  userId         String         // Foreign key to User
  strategy       Strategy       @relation(fields: [strategyId], references: [id])
  strategyId     Int            // Foreign key to Strategy
  parentComment  Comment?       @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId Int?          // Foreign key to parent comment (nullable)

  replies        Comment[]      @relation("CommentReplies")
}

enum Gamemode {
  NORMAL
  SPECIAL
  HARDCORE
}

enum StratDifficulty {
  EASY
  MEDIUM
  HARD
}

enum InGameGamemode {
  EASY
  INTERMEDIATE
  MOLTEN
  FALLEN
}

enum Difficulty {
  VERY_EASY
  EASY
  NORMAL
  HARD
  INSANE
}

enum NumOfPlayer {
  ONE
  TWO
  THREE
  FOUR
}



model Player {
  id         Int          @id @default(autoincrement())
  playerNo   Int // Unique player number (1, 2, 3, 4)
  towers     String[] // List of tower names for the player
  consumables String[]
  steps      PlayerData[] // Relationship with Step model
  strategyId Int // Foreign key to Strategy
  strategy   Strategy     @relation(fields: [strategyId], references: [id], onDelete: Cascade) // Relation field
}

model PlayerData {
  id          Int    @id @default(autoincrement())
  waveStart   String
  waveEnd     String
  description String
  playerId    Int // Foreign key to Player
  player      Player @relation(fields: [playerId], references: [id], onDelete: Cascade) // Relation field
}

enum Tower {
  SCOUT
  SNIPER
  PAINTBALLER
  DEMOMAN
  HUNTER
  SOLDIER
  MILITANT
  MEDIC
  FREEZER
  FARM
  SHOTGUNNER
  ROCKETEER
  TRAPPER
  ACE_PILOT
  PYROMANCER
  MILITARY_BASE
  CROOK_BOSS
  ELECTROSHOCKER
  COMMANDER
  WARDEN
  COWBOY
  DJ_BOOTH
  MINIGUNNER
  RANGER
  GATLING_GUN
  TURRET
  MOTOR
  PURSUIT
  MERCENARY_BASE
  BRAWLER
  ACCELERATOR
  ENGINEER
  GLADIATOR
  COMMANDO
  SLASHER
  FROST_BLASTER
  ARCHER
  SWARMER
  TOXIC_GUNNER
  SLEDGER
  EXECUTIONER
  ELF_CAMP
  NECROMANCER
  JESTER
  CYROMANCER
  WAR_MACHINE
  MECHA_BASE
}